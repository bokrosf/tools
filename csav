#!/bin/bash

# Configuration variables
readonly config_checkout_path="/home/bokrosf"
readonly repository_name="configs"
readonly repository_url="https://github.com/bokrosf/$repository_name"
readonly jump_terminal_command='alacritty --working-directory "$(config_root_path)" &'

print_error()
{
  echo "csav: $1"
}

config_root_path()
{
  echo "$config_checkout_path/$repository_name"
}

require_root_privilege()
{
  if [[ $(id -u) -ne 0 ]]
  then
    print_error "must be superuser to perform this operation."
    exit 1
  fi
}

require_initialization()
{
  if [[ ! -d $(config_root_path)/.git ]]
  then
    print_error "init required, not a git repository: '$(config_root_path)'"
    echo "  use \"csav init\" to clone the repository."
    exit 1
  fi
}

access_config_git()
{
  git -C "$(config_root_path)" "$@"
}

help()
{
  # TODO Implement displaying usage.
  echo 'usage: csav <operation> [<args>...]
  operations:
      help, -h, --help
          Displays help.
      init
          Checks out the git repository containing the configuration files
          and initializes file permissions and ownerships. Required configuration 
          variables must be set. See "configuration variables" section.
      list
          Lists the saved configuration files.
      add <path>...
          Adds files or directories to the saved files.
      rm <path>...
          Removes files or directories from saved files.
      apply <destination> [<subtree>...]
          Copies saved files to the specified destination 
          by preserving the tree structure. If no subtree specified
          then all saved files copied. If subtrees specified then
          only they copied to the destination.
      backup
          Adds all files to the saved files that are already present.
          This way all saved files can be refreshed to store the
          value present at the current system.
      restoreall
          Removes all uncommited changes from the repository.
      jump
          Opens a new terminal instance and navigates to the repository.
          Useful if repository maintenance needed.
          Terminal configured by the "jump_terminal_command" variable.
      restore [<args>...]
          git restore [<args>...] called on the repository.
      commit [<args>...]
          git commit [<args>...] called on the repository.
      pull [<args>...]
          git pull [<args>...] called on the repository.
      push [<args>...]
          git push [<args>...] called on the repository.
      status [<args>...]
          git status [<args>...] called on the repository.
      diff [<args>...]
          git diff [<args>...] called on the repository.

  configuration variables
      mandatory
          config_checkout_path
              Absolute path where the repository that contains the configurations checked out.
          repository_name
              Name of the configuration repository.
          repository_url
              Url of the configuration repository.
      optional
          jump_terminal_command
              Terminal opening command that executed when the "jump" command specified.'
}

init()
{
  require_root_privilege

  # Obtaining the repository.
  if [[ -d $(config_root_path)/.git ]]
  then
    echo "Already initialized."
    return 0
  fi

  mkdir -p "$(config_root_path)"

  if [[ $? -ne 0 ]]
  then
    print_error "directory creation failed -- '$(config_root_path)'"
    exit 1
  fi

  git clone "$repository_url" "$(config_root_path)"

  if [[ $? -ne 0 ]]
  then
    rm -rf "$(config_root_path)"
    print_error "repository cloning failed -- '$repository_url'"
    exit 1
  fi

  # Setting privileges of files and directories.
  owner_user_name="$SUDO_USER"

  if [[ -z $owner_user_name ]]
  then
    owner_user_name="$USER"
  fi

  chown -R "$owner_user_name": "$(config_root_path)"
  cd "$(config_root_path)"

  for root_item in $(ls -A | grep -v -e '.git' -e 'README.md' -e 'home')
  do
    chown -R root: "$root_item"
  done

  if [[ -e home ]]
  then
    chown root: home
  fi

  for user_name in $(ls -A home)
  do
    chown -R "$user_name": "home/$user_name"
  done

  echo "initialized"
}

list()
{
  find "$(config_root_path)" -type f ! -path "*.git*" ! -path "*README.md" \
    | sed "s|"$(config_root_path)"||"
}

add()
{
  require_initialization

  if (( $# < 1 ))
  then
    print_error "nothing specified, nothing added."
    exit 1
  fi

  for path in "$@"
  do
    cp -a --parent "$(realpath "$path")" "$(config_root_path)"
  done

  access_config_git add "*"
}

rm()
{
  for path in "$@"
  do
    access_config_git rm -r "$(config_root_path)$path"
  done
}

apply()
{
  require_initialization
  local destination_path="$1"
  shift

  if [[ -z $destination_path ]]
  then
    print_error "destination path must be supplied."
    exit 1
  fi

  destination_path="$(realpath -m "$destination_path")"

  if [[ -e $destination_path ]] && ! [[ -d $destination_path ]]
  then
    print_error "destination path must be a directory."
    exit 1
  fi

  if ! [[ -d $destination_path ]]
  then
    mkdir -p "$destination_path"
  fi

  declare -a subtree_paths

  if (( $# > 0 ))
  then
    for path in "$@"
    do
      local system_path="$(realpath -m "$path")"

      if [[ -e $(config_root_path)$system_path ]]
      then
        subtree_paths+=("$system_path")
      else
        print_error "not existing: $system_path"
      fi
    done
  else
    mapfile -t subtree_paths < <(ls -A $(config_root_path) | grep -v -e ".git" -e "README.md")
  fi

  cd "$(config_root_path)"

  for subtree in "${subtree_paths[@]}"
  do
    subtree=$(echo "$subtree" | sed "s|^/||")
    cp -a --parent "$subtree" "$destination_path"
  done
}

backup()
{
  add $(list)
}

restoreall()
{
  require_initialization
  access_config_git restore -S -W "*"
  access_config_git clean -dfx
}

jump()
{
  require_initialization

  if [[ -z $jump_terminal_command ]]
  then
    print_error "can not jump to '$(config_root_path)', 'jump_terminal_command' variable must be set".
    exit 1
  fi

  eval "$jump_terminal_command"
}

if [[ -z $config_checkout_path ]]
then
  print_error "'config_checkout_path' variable must be set."
  exit 1
fi

if [[ -z $repository_name ]]
then
  print_error "'repository_name' variable must be set."
  exit 1
fi

if [[ -z $repository_url ]]
then
  print_error "'repository_url' variable must be set."
  exit 1
fi

readonly command="$1"

case "$command" in
  help \
  | -h \
  | --help)
    help
    ;;
  init \
  | list \
  | add \
  | rm \
  | apply \
  | backup \
  | restoreall \
  | jump)
    shift
    $command "$@"
    ;;
  restore \
  | commit \
  | pull \
  | push \
  | status \
  | diff )
    access_config_git "$@"
    ;;
  "")
    print_error "no operation specified (use 'help' for help)"
    ;;
  *)
    print_error "invalid operation -- '$1'"
    ;;
esac